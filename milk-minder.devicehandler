/**
 *  milk-minder
 *
 *  Copyright 2014 Wesley Bornor
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
metadata {
	definition (name: "milk-minder", namespace: "wbornor@gmail.com", author: "Wesley Bornor") {
		capability "Energy Meter"
		capability "Signal Strength"
        capability "Temperature Measurement"
		capability "Relative Humidity Measurement"
		capability "Sensor"

		fingerprint profileId: "0104", deviceId: "0302", inClusters: "0000,0001,0003,0009,0402,0405"
	}

	// simulator metadata
	simulator {
		for (int i = 0; i <= 100; i += 10) {
			status "${i}F": "temperature: $i F"
		}

		for (int i = 0; i <= 100; i += 10) {
			status "${i}%": "humidity: ${i}%"
		}
	}

	// UI tile definitions
	tiles {
		valueTile("temperature", "device.temperature",  width: 1, height: 1) {
			state("temperature", label:'${currentValue}Â°',
				backgroundColors:[
					[value: 0, color: "#bc2323"], 	//red
					[value: 30, color: "#1e9cbb"], 	//blue
					[value: 75, color: "#44b621"]	//green
				]
			)
		}
		valueTile("humidity", "device.humidity", width: 2, height: 2) {
			state ("Mass", label:'${currentValue}', unit:"", 
                 backgroundColors:[
                    [value: 30, color: "#bc2323"], 	//red
					[value: 75, color: "#1e9cbb"], 	//blue
					[value: 100, color: "#44b621"]	//green
				])
		}

		main(["humidity", "temperature"])
		details(["humidity", "temperature"])
	}
}

// Parse incoming device messages to generate events
def parse(String description) {
	log.debug "description: ${description}"
    description = zigbee.parse(description)?.text
    log.debug "Parsed description: ${description}"
	if(description == "ping"){
      log.debug ("ping")
      return null
    }
    def name = parseName(description)
    def value = parseValue(description)
	def unit = name == "temperature" ? getTemperatureScale() : (name == "humidity" ? "%" : null)
	def result = createEvent(name: name, value: value, unit: unit)
	log.debug "Parse returned ${result?.descriptionText}"
	return result
}

private String parseName(String description) {
	if (description?.startsWith("temperature: ")) {
		return "temperature"
	} else if (description?.startsWith("humidity: ")) {
		return "humidity"
	}    
	null
}

private String parseValue(String description) {
	if (description?.startsWith("temperature: ")) {
		return zigbee.parseHATemperatureValue(description, "temperature: ", getTemperatureScale())
	} else if (description?.startsWith("humidity: ")) {
        log.debug ("humidity value: ${description}")
		def pct = (description - "humidity: " - "%").trim()
		if (pct.isNumber()) {
			return Math.round(new BigDecimal(pct)).toString()
		}
	}
	null
}
